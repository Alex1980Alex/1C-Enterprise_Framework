#!/usr/bin/env python3
"""
Command Line Interface for SonarQube Integration
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SonarQube
"""

import argparse
import json
import sys
from pathlib import Path

from .config_manager import ConfigManager
from .rules_manager import RulesManager
from .report_generator import ReportGenerator
from .ci_integration import CIIntegration


def init_project(args):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å SonarQube"""
    config_manager = ConfigManager(args.project_root)
    
    custom_rules = {}
    if args.max_complexity:
        custom_rules["CyclomaticComplexity.maxComplexity"] = args.max_complexity
    if args.max_line_length:
        custom_rules["LineLength.maxLineLength"] = args.max_line_length
    if args.max_method_size:
        custom_rules["MethodSize.maxMethodSize"] = args.max_method_size
    
    success = config_manager.sync_configs(
        args.project_key,
        args.project_name,
        custom_rules
    )
    
    if success:
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{args.project_name}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        print(f"   - sonar-project.properties")
        print(f"   - .bsl-language-server.json")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)


def list_rules(args):
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
    rules_manager = RulesManager()
    
    if args.severity:
        rules = rules_manager.get_rules_by_severity(args.severity)
        print(f"\nüìã –ü—Ä–∞–≤–∏–ª–∞ —É—Ä–æ–≤–Ω—è {args.severity}:")
    elif args.category:
        rules = rules_manager.get_rules_by_category(args.category)
        print(f"\nüìã –ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{args.category}':")
    else:
        rules = list(rules_manager.rules_cache.values())
        print(f"\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ({len(rules)}):")
    
    for rule in rules:
        status = "‚úÖ" if rule.enabled else "‚ùå"
        print(f"{status} {rule.key:<30} | {rule.severity:<8} | {rule.name}")
        if args.verbose:
            print(f"    {rule.description}")
            if rule.default_value:
                print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {rule.default_value}")
            print()


def create_profile(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∞–≤–∏–ª"""
    rules_manager = RulesManager()
    
    severity_levels = args.severity.split(',') if args.severity else None
    categories = args.category.split(',') if args.category else None
    
    profile = rules_manager.create_rules_profile(
        args.name,
        severity_levels,
        categories
    )
    
    output_file = args.output or f"{args.name.lower().replace(' ', '_')}_profile.json"
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(profile, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{args.name}' —Å–æ–∑–¥–∞–Ω: {output_file}")
        print(f"üìä –í–∫–ª—é—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(profile['rules'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        sys.exit(1)


def analyze(args):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
    ci = CIIntegration(args.project_root)
    
    print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ BSL Language Server...")
    result = ci.run_local_analysis(args.src_dir, args.output_dir)
    
    if result["success"]:
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        if "total_issues" in result:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {result['total_issues']}")
            print(f"üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['analyzed_files']}")
        print(f"üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result['reports_dir']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        if result.get("stderr"):
            print(f"Stderr: {result['stderr']}")
        sys.exit(1)


def generate_report(args):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    report_gen = ReportGenerator(args.output_dir)
    
    if not Path(args.input_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input_file}")
        sys.exit(1)
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞: {args.input_file}")
    
    if args.format == "sonar":
        results = report_gen.parse_sonar_json_report(args.input_file)
    else:
        results = report_gen.parse_bsl_json_report(args.input_file)
    
    if not results:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(results)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    if args.excel:
        excel_file = report_gen.export_to_excel(results)
        if excel_file:
            print(f"üìä Excel –æ—Ç—á–µ—Ç: {excel_file}")
    
    if args.csv:
        csv_file = report_gen.export_to_csv(results)
        if csv_file:
            print(f"üìÑ CSV –æ—Ç—á–µ—Ç: {csv_file}")
    
    if args.html:
        html_file = report_gen.export_to_html(results)
        if html_file:
            print(f"üåê HTML –æ—Ç—á–µ—Ç: {html_file}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    summary = report_gen.generate_summary_report(results)
    print(f"\nüìà –°–≤–æ–¥–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
    for severity, count in summary["by_severity"].items():
        print(f"   {severity}: {count}")


def setup_ci(args):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD"""
    ci = CIIntegration(args.project_root)
    
    success = ci.create_ci_config_files(args.type, args.project_key)
    
    if success:
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {args.type} —Å–æ–∑–¥–∞–Ω–∞!")
        
        if args.pre_commit:
            if ci.setup_pre_commit_hook():
                print("‚úÖ Pre-commit —Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pre-commit —Ö—É–∫–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {args.type}")
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="SonarQube Integration –¥–ª—è 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        "--project-root", 
        default=".",
        help="–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ init
    init_parser = subparsers.add_parser("init", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    init_parser.add_argument("project_key", help="–ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ SonarQube")
    init_parser.add_argument("project_name", help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    init_parser.add_argument("--max-complexity", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    init_parser.add_argument("--max-line-length", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏")
    init_parser.add_argument("--max-method-size", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–µ—Ç–æ–¥–∞")
    init_parser.set_defaults(func=init_project)
    
    # –ö–æ–º–∞–Ω–¥–∞ rules
    rules_parser = subparsers.add_parser("rules", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏")
    rules_parser.add_argument("--severity", help="–§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏")
    rules_parser.add_argument("--category", help="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    rules_parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    rules_parser.set_defaults(func=list_rules)
    
    # –ö–æ–º–∞–Ω–¥–∞ profile
    profile_parser = subparsers.add_parser("profile", help="–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∞–≤–∏–ª")
    profile_parser.add_argument("name", help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
    profile_parser.add_argument("--severity", help="–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    profile_parser.add_argument("--category", help="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    profile_parser.add_argument("--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    profile_parser.set_defaults(func=create_profile)
    
    # –ö–æ–º–∞–Ω–¥–∞ analyze
    analyze_parser = subparsers.add_parser("analyze", help="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
    analyze_parser.add_argument("--src-dir", default="src", help="–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏")
    analyze_parser.add_argument("--output-dir", default="reports", help="–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤")
    analyze_parser.set_defaults(func=analyze)
    
    # –ö–æ–º–∞–Ω–¥–∞ report
    report_parser = subparsers.add_parser("report", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    report_parser.add_argument("input_file", help="–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞")
    report_parser.add_argument("--format", choices=["sonar", "bsl"], default="bsl", help="–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    report_parser.add_argument("--output-dir", default="reports", help="–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤")
    report_parser.add_argument("--excel", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel –æ—Ç—á–µ—Ç")
    report_parser.add_argument("--csv", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CSV –æ—Ç—á–µ—Ç")
    report_parser.add_argument("--html", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç")
    report_parser.set_defaults(func=generate_report)
    
    # –ö–æ–º–∞–Ω–¥–∞ ci
    ci_parser = subparsers.add_parser("ci", help="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD")
    ci_parser.add_argument("type", choices=["github", "gitlab", "jenkins", "azure"], help="–¢–∏–ø CI/CD —Å–∏—Å—Ç–µ–º—ã")
    ci_parser.add_argument("project_key", help="–ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ SonarQube")
    ci_parser.add_argument("--pre-commit", action="store_true", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit —Ö—É–∫")
    ci_parser.set_defaults(func=setup_ci)
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    args.func(args)


if __name__ == "__main__":
    main()