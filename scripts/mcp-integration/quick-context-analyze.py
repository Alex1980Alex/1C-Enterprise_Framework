#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quick Start Script for Dynamic Context Engine
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from dynamic_context_engine import DynamicContextEngine, TaskContext

def quick_analyze(user_request, file_paths=None):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""

    print(f"ü§ñ Dynamic Context Engine v1.0")
    print(f"üìù –ó–∞–ø—Ä–æ—Å: {user_request}")
    print(f"üìÅ –§–∞–π–ª—ã: {file_paths if file_paths else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}")
    print("-" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
    engine = DynamicContextEngine()

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = engine.analyze_request(user_request, file_paths or [])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = engine.recommend_tools(context)

    print(f"üéØ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
    print(f"   –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤: {[ft.value for ft in context.file_types]}")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {context.complexity.value}")
    print(f"   –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {context.intent}")
    print(f"   –û–±–ª–∞—Å—Ç—å: {context.domain}")
    print()

    print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")

    if not recommendations:
        print("   ‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    for i, rec in enumerate(recommendations[:3], 1):
        confidence_emoji = "üü¢" if rec.confidence >= 0.8 else "üü°" if rec.confidence >= 0.6 else "üî¥"
        print(f"   {i}. {confidence_emoji} {rec.tool_name}")
        print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.2f}")
        print(f"      –í—Ä–µ–º—è: {rec.estimated_time}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec.reason}")
        print()

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    top_rec = recommendations[0]
    print(f"üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞:")
    print(f"```javascript")
    print(f"{top_rec.tool_name}({{")
    for key, value in top_rec.parameters.items():
        if isinstance(value, str):
            print(f'  {key}: "{value}",')
        else:
            print(f'  {key}: {json.dumps(value)},')
    print(f"}})")
    print(f"```")

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Dynamic Context Engine Quick Start")
    parser.add_argument("request", help="–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("--files", nargs="*", help="–ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º")

    args = parser.parse_args()

    quick_analyze(args.request, args.files)
