#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quick Start Script for Dynamic Context Engine v1.0
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import json
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# –ò–º–ø–æ—Ä—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from dynamic_context_engine import DynamicContextEngine, TaskContext
    ENGINE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å dynamic_context_engine –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    ENGINE_AVAILABLE = False

def quick_analyze_basic(user_request, file_paths=None):
    """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""

    print(f"ü§ñ Dynamic Context Engine v1.0 (–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)")
    print(f"üìù –ó–∞–ø—Ä–æ—Å: {user_request}")
    print(f"üìÅ –§–∞–π–ª—ã: {file_paths if file_paths else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}")
    print("-" * 60)

    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    request_lower = user_request.lower()
    file_extensions = []

    if file_paths:
        file_extensions = [Path(fp).suffix.lower() for fp in file_paths]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    task_type = "unknown"
    if any(word in request_lower for word in ['–Ω–∞–π—Ç–∏', '–Ω–∞–π–¥–∏', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '—Ñ—É–Ω–∫—Ü–∏–∏', '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã']):
        task_type = "search"
    elif any(word in request_lower for word in ['–∑–∞–º–µ–Ω–∏—Ç—å', '–∏–∑–º–µ–Ω–∏—Ç—å', '–æ–±–Ω–æ–≤–∏—Ç—å']):
        task_type = "modify"
    elif any(word in request_lower for word in ['—Å–æ–∑–¥–∞—Ç—å', '–¥–æ–±–∞–≤–∏—Ç—å', '–Ω–æ–≤—ã–π']):
        task_type = "create"
    elif any(word in request_lower for word in ['–ø–∞—Ä—Å–∏–Ω–≥', '—Å–∞–π—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']):
        task_type = "web_parsing"
    elif any(word in request_lower for word in ['–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', 'pdf', 'docx']):
        task_type = "document_conversion"

    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []

    if '.bsl' in file_extensions or any(word in request_lower for word in ['bsl', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '1—Å']):
        if task_type == "search":
            recommendations.append({
                'tool': 'mcp__ast-grep-mcp__ast_grep',
                'confidence': 0.9,
                'reason': 'BSL —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û',
                'params': {
                    'pattern': '–§—É–Ω–∫—Ü–∏—è $NAME($$$ARGS)',
                    'bsl_type': 'functions',
                    'path': file_paths[0] if file_paths else 'src/'
                }
            })
        elif task_type == "modify":
            recommendations.append({
                'tool': 'mcp__serena__replace_symbol_body',
                'confidence': 0.85,
                'reason': '–ó–∞–º–µ–Ω–∞ —Ç–µ–ª–∞ BSL —Ñ—É–Ω–∫—Ü–∏–∏/–ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
                'params': {
                    'name_path': '–ò–º—è–§—É–Ω–∫—Ü–∏–∏',
                    'relative_path': file_paths[0] if file_paths else 'Module.bsl'
                }
            })

    if task_type == "web_parsing":
        recommendations.append({
            'tool': 'mcp__universal-web-scraper__scrape_website',
            'confidence': 0.95,
            'reason': '–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å–∞–π—Ç–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏',
            'params': {
                'url': 'https://its.1c.ru/db/metod8dev',
                'adapter_type': 'its_1c' if 'its.1c' in request_lower else 'auto',
                'save_to_memory': True
            }
        })

    if task_type == "document_conversion":
        recommendations.append({
            'tool': 'mcp__docling__convert_document',
            'confidence': 0.9,
            'reason': '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Markdown',
            'params': {
                'extract_images': True,
                'ocr_enabled': True
            }
        })

    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    if any(word in request_lower for word in ['–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å']):
        recommendations.append({
            'tool': 'mcp__1c-framework-docs__search_docs',
            'confidence': 0.8,
            'reason': '–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞',
            'params': {
                'search_type': 'hybrid',
                'limit': 5
            }
        })

    # –°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if any(word in request_lower for word in ['–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑', '—Å–ª–æ–∂–Ω', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']):
        recommendations.append({
            'tool': 'mcp__sequential-thinking__sequentialthinking',
            'confidence': 0.75,
            'reason': '–°–ª–æ–∂–Ω—ã–π –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –∞–Ω–∞–ª–∏–∑',
            'params': {
                'totalThoughts': 5,
                'nextThoughtNeeded': True
            }
        })

    print(f"üéØ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:")
    print(f"   –¢–∏–ø —Ñ–∞–π–ª–æ–≤: {file_extensions}")
    print(f"   –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
    print(f"   –ü—Ä–µ–¥–º–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: {'1c' if '.bsl' in file_extensions else 'general'}")
    print()

    print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")

    if not recommendations:
        print("   ‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: mcp__serena__search_for_pattern –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞")
        return

    for i, rec in enumerate(recommendations[:3], 1):
        confidence_emoji = "üü¢" if rec['confidence'] >= 0.8 else "üü°" if rec['confidence'] >= 0.6 else "üî¥"
        print(f"   {i}. {confidence_emoji} {rec['tool']}")
        print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec['confidence']:.2f}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec['reason']}")
        print()

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        top_rec = recommendations[0]
        print(f"üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞:")
        print(f"```javascript")
        print(f"{top_rec['tool']}({{")
        for key, value in top_rec['params'].items():
            if isinstance(value, str):
                print(f'  {key}: "{value}",')
            else:
                print(f'  {key}: {json.dumps(value)},')
        print(f"}})")
        print(f"```")

def quick_analyze_full(user_request, file_paths=None):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–≤–∏–∂–∫–æ–º"""

    print(f"ü§ñ Dynamic Context Engine v1.0 (–ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º)")
    print(f"üìù –ó–∞–ø—Ä–æ—Å: {user_request}")
    print(f"üìÅ –§–∞–π–ª—ã: {file_paths if file_paths else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}")
    print("-" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
    engine = DynamicContextEngine()

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context = engine.analyze_request(user_request, file_paths or [])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = engine.recommend_tools(context)

    print(f"üéØ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
    print(f"   –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤: {[ft.value for ft in context.file_types]}")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {context.complexity.value}")
    print(f"   –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {context.intent}")
    print(f"   –û–±–ª–∞—Å—Ç—å: {context.domain}")
    print()

    print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")

    if not recommendations:
        print("   ‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    for i, rec in enumerate(recommendations[:3], 1):
        confidence_emoji = "üü¢" if rec.confidence >= 0.8 else "üü°" if rec.confidence >= 0.6 else "üî¥"
        print(f"   {i}. {confidence_emoji} {rec.tool_name}")
        print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.2f}")
        print(f"      –í—Ä–µ–º—è: {rec.estimated_time}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec.reason}")
        print()

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        top_rec = recommendations[0]
        print(f"üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞:")
        print(f"```javascript")
        print(f"{top_rec.tool_name}({{")
        for key, value in top_rec.parameters.items():
            if isinstance(value, str):
                print(f'  {key}: "{value}",')
            else:
                print(f'  {key}: {json.dumps(value)},')
        print(f"}})")
        print(f"```")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="Dynamic Context Engine Quick Start")
    parser.add_argument("request", help="–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("--files", nargs="*", help="–ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º")
    parser.add_argument("--basic", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º")

    args = parser.parse_args()

    if ENGINE_AVAILABLE and not args.basic:
        try:
            quick_analyze_full(args.request, args.files)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º...")
            quick_analyze_basic(args.request, args.files)
    else:
        quick_analyze_basic(args.request, args.files)

if __name__ == "__main__":
    main()